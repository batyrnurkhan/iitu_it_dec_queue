// services/NotificationService.js

class NotificationService {
    constructor() {
        this.permission = Notification.permission;
        this.isSupported = 'Notification' in window;
        this.userTicketInfo = null; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–ª–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    isNotificationSupported() {
        return this.isSupported;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    getPermissionStatus() {
        return this.permission;
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async requestPermission() {
        if (!this.isSupported) {
            console.warn('Browser does not support notifications');
            return 'denied';
        }

        if (this.permission === 'granted') {
            return 'granted';
        }

        if (this.permission === 'denied') {
            return 'denied';
        }

        try {
            const permission = await Notification.requestPermission();
            this.permission = permission;
            return permission;
        } catch (error) {
            console.error('Error requesting notification permission:', error);
            return 'denied';
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–ª–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserTicketInfo(ticketInfo) {
        this.userTicketInfo = ticketInfo;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        localStorage.setItem('userTicketInfo', JSON.stringify(ticketInfo));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–ª–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserTicketInfo() {
        if (!this.userTicketInfo) {
            const stored = localStorage.getItem('userTicketInfo');
            if (stored) {
                this.userTicketInfo = JSON.parse(stored);
            }
        }
        return this.userTicketInfo;
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–ª–æ–Ω–µ
    clearUserTicketInfo() {
        this.userTicketInfo = null;
        localStorage.removeItem('userTicketInfo');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ —Ç–∞–ª–æ–Ω–∞
    showTicketCalledNotification(ticketData) {
        if (this.permission !== 'granted') {
            console.warn('Notification permission not granted');
            return;
        }

        const userTicket = this.getUserTicketInfo();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à –ª–∏ —ç—Ç–æ —Ç–∞–ª–æ–Ω
        if (!userTicket || !this.isOurTicket(ticketData, userTicket)) {
            return;
        }

        const title = 'üîî –í–∞—à —Ç–∞–ª–æ–Ω –≤—ã–∑–≤–∞–Ω!';
        const body = `${ticketData.full_name}, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ ${this.getLocationText(ticketData.manager_username)}`;

        const options = {
            body: body,
            icon: '/static/logo.png', // –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
            badge: '/static/logo.png',
            image: '/static/notification-banner.png', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
            tag: 'ticket-called', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            requireInteraction: true, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            vibrate: [200, 100, 200], // –í–∏–±—Ä–∞—Ü–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            actions: [
                {
                    action: 'view',
                    title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–ª–æ–Ω'
                },
                {
                    action: 'close',
                    title: '–ó–∞–∫—Ä—ã—Ç—å'
                }
            ],
            data: {
                ticketId: ticketData.ticket_id,
                ticketNumber: ticketData.ticket_number,
                fullName: ticketData.full_name,
                queueType: ticketData.queue_type,
                managerUsername: ticketData.manager_username,
                timestamp: new Date().toISOString()
            }
        };

        try {
            const notification = new Notification(title, options);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            notification.onclick = () => {
                window.focus(); // –§–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞
                notification.close();

                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∞–ª–æ–Ω–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –Ω–µ–π
                if (window.location.pathname !== '/ticket') {
                    window.location.href = '/ticket';
                }
            };

            notification.onshow = () => {
                console.log('Notification shown');
                // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ requireInteraction: false)
                setTimeout(() => {
                    notification.close();
                }, 10000);
            };

            notification.onclose = () => {
                console.log('Notification closed');
            };

            notification.onerror = (error) => {
                console.error('Notification error:', error);
            };

            return notification;
        } catch (error) {
            console.error('Error showing notification:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(title, message, options = {}) {
        if (this.permission !== 'granted') {
            console.warn('Notification permission not granted');
            return;
        }

        const defaultOptions = {
            icon: '/static/logo.png',
            badge: '/static/logo.png',
            tag: 'general-notification',
            ...options
        };

        try {
            const notification = new Notification(title, {
                body: message,
                ...defaultOptions
            });

            notification.onclick = () => {
                window.focus();
                notification.close();
            };

            return notification;
        } catch (error) {
            console.error('Error showing notification:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–ª–æ–Ω –Ω–∞—à–∏–º
    isOurTicket(ticketData, userTicket) {
        return (
            ticketData.ticket_id === userTicket.ticketId ||
            (ticketData.ticket_number === userTicket.ticketNumber &&
             ticketData.full_name === userTicket.fullName &&
             ticketData.queue_type === userTicket.queueType)
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    getLocationText(managerUsername) {
        if (!managerUsername) return '–º–µ–Ω–µ–¥–∂–µ—Ä—É';

        const username = managerUsername.toLowerCase();

        if (username.includes('auditoria111') || username.includes('aauditoria111')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 111';
        } else if (username.includes('auditoria303')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 303';
        } else if (username.includes('auditoria305')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 305';
        } else if (username.includes('auditoria306')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 306';
        } else {
            const stolNumber = username.charAt(username.length - 1);
            return `—Å—Ç–æ–ª—É ${stolNumber}`;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async showPermissionRequest() {
        if (!this.isSupported) {
            return {
                granted: false,
                reason: '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            };
        }

        if (this.permission === 'granted') {
            return {
                granted: true,
                reason: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'
            };
        }

        if (this.permission === 'denied') {
            return {
                granted: false,
                reason: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.'
            };
        }

        const permission = await this.requestPermission();

        return {
            granted: permission === 'granted',
            reason: permission === 'granted'
                ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
                : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        };
    }

    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showTestNotification() {
        return this.showNotification(
            '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤–∞—à —Ç–∞–ª–æ–Ω.',
            {
                tag: 'test-notification',
                requireInteraction: false
            }
        );
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const notificationService = new NotificationService();

export default notificationService;