import React, { useState, useEffect, useCallback, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../styles/login.css';
import { config } from "../config";
import logo from "../static/logo.png";

function Login() {
    // State management
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const [generalError, setGeneralError] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [capsLockOn, setCapsLockOn] = useState(false);
    const [rememberMe, setRememberMe] = useState(false);

    const navigate = useNavigate();
    const usernameRef = useRef(null);
    const passwordRef = useRef(null);

    // Form validation
    const validateForm = useCallback(() => {
        const newErrors = {};

        // Validate username
        if (!username.trim()) {
            newErrors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        } else if (username.trim().length < 3) {
            newErrors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
        } else if (!/^[a-zA-Z0-9_]+$/.test(username.trim())) {
            newErrors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è';
        }

        // Validate password
        if (!password) {
            newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (password.length < 4) {
            newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [username, password]);

    // Clear field error on change
    const clearFieldError = useCallback((fieldName) => {
        if (errors[fieldName]) {
            setErrors(prev => ({ ...prev, [fieldName]: '' }));
        }
        if (generalError) {
            setGeneralError('');
        }
    }, [errors, generalError]);

    // Handle caps lock detection
    const handleKeyPress = useCallback((event) => {
        const capsLock = event.getModifierState && event.getModifierState('CapsLock');
        setCapsLockOn(capsLock);
    }, []);

    // Handle form submission
    const handleSubmit = useCallback(async (event) => {
        event.preventDefault();

        if (!validateForm()) {
            // Haptic feedback –¥–ª—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (navigator.vibrate) {
                navigator.vibrate([100, 50, 100]);
            }
            return;
        }

        setIsLoading(true);
        setGeneralError('');
        setErrors({});

        try {
            const response = await axios.post(config.loginUrl, {
                username: username.trim(),
                password: password,
            }, {
                timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            const token = response.data.token;
            localStorage.setItem('access_token', token);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
            if (rememberMe) {
                localStorage.setItem('remembered_username', username.trim());
            } else {
                localStorage.removeItem('remembered_username');
            }

            // Haptic feedback –¥–ª—è —É—Å–ø–µ—Ö–∞
            if (navigator.vibrate) {
                navigator.vibrate([50, 25, 50]);
            }

            // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            setTimeout(() => {
                navigate('/profile');
            }, 300);

        } catch (error) {
            console.error("Login error:", error);

            // Haptic feedback –¥–ª—è –æ—à–∏–±–∫–∏
            if (navigator.vibrate) {
                navigator.vibrate([200, 100, 200]);
            }

            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;

                if (status === 401) {
                    setGeneralError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                } else if (status === 429) {
                    setGeneralError('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                } else if (status === 500) {
                    setGeneralError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                } else if (data && data.errors) {
                    setErrors(data.errors);
                } else if (data && data.error) {
                    setGeneralError(data.error);
                } else {
                    setGeneralError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É');
                }
            } else if (error.code === 'ECONNABORTED') {
                setGeneralError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            } else {
                setGeneralError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }

            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
            setTimeout(() => {
                if (errors.username && usernameRef.current) {
                    usernameRef.current.focus();
                } else if (errors.password && passwordRef.current) {
                    passwordRef.current.focus();
                }
            }, 100);
        } finally {
            setIsLoading(false);
        }
    }, [validateForm, username, password, rememberMe, navigate, errors]);

    // Toggle password visibility
    const togglePasswordVisibility = useCallback(() => {
        setShowPassword(prev => !prev);
    }, []);

    // Load remembered username
    useEffect(() => {
        const rememberedUsername = localStorage.getItem('remembered_username');
        if (rememberedUsername) {
            setUsername(rememberedUsername);
            setRememberMe(true);
            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ username —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
            setTimeout(() => {
                if (passwordRef.current) {
                    passwordRef.current.focus();
                }
            }, 100);
        } else {
            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ username
            setTimeout(() => {
                if (usernameRef.current) {
                    usernameRef.current.focus();
                }
            }, 100);
        }
    }, []);

    // Check if already logged in
    useEffect(() => {
        const token = localStorage.getItem('access_token');
        if (token) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            axios.get(config.profileUrl, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            })
            .then(() => {
                navigate('/profile');
            })
            .catch(() => {
                // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                localStorage.removeItem('access_token');
            });
        }
    }, [navigate]);

    // Keyboard shortcuts
    useEffect(() => {
        const handleKeyDown = (event) => {
            // ESC –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
            if (event.key === 'Escape') {
                setGeneralError('');
                setErrors({});
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, []);

    // Set page title
    useEffect(() => {
        document.title = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - IITU";
    }, []);

    return (
        <div className="login-container">
            {/* –õ–æ–≥–æ—Ç–∏–ø */}
            <img
                src={logo}
                alt="–õ–æ–≥–æ—Ç–∏–ø IITU"
                className="login-logo"
                onError={(e) => {
                    e.target.style.display = 'none';
                }}
            />

            <form
                onSubmit={handleSubmit}
                className="login-form"
                noValidate
                aria-label="–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
            >
                <h1 className="login-title">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
                <p className="login-subtitle">
                    –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
                </p>

                {/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ */}
                {generalError && (
                    <div className="login-error" role="alert" aria-live="polite">
                        {generalError}
                    </div>
                )}

                {/* –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="form-group">
                    <label htmlFor="username" className="form-label">
                        <span>üë§</span>
                        <span>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
                    </label>
                    <input
                        ref={usernameRef}
                        type="text"
                        id="username"
                        className={`login-input ${errors.username ? 'error' : ''}`}
                        value={username}
                        onChange={(e) => {
                            setUsername(e.target.value);
                            clearFieldError('username');
                        }}
                        onKeyPress={handleKeyPress}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        disabled={isLoading}
                        autoComplete="username"
                        aria-describedby={errors.username ? "username-error" : undefined}
                        aria-invalid={!!errors.username}
                        required
                    />
                    {errors.username && (
                        <span
                            className="error-text"
                            id="username-error"
                            role="alert"
                            aria-live="polite"
                        >
                            {errors.username}
                        </span>
                    )}
                </div>

                {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
                <div className="form-group">
                    <label htmlFor="password" className="form-label">
                        <span>üîí</span>
                        <span>–ü–∞—Ä–æ–ª—å</span>
                    </label>
                    <div className="password-wrapper">
                        <input
                            ref={passwordRef}
                            type={showPassword ? "text" : "password"}
                            id="password"
                            className={`login-input ${errors.password ? 'error' : ''}`}
                            value={password}
                            onChange={(e) => {
                                setPassword(e.target.value);
                                clearFieldError('password');
                            }}
                            onKeyPress={handleKeyPress}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            disabled={isLoading}
                            autoComplete="current-password"
                            aria-describedby={errors.password ? "password-error" : undefined}
                            aria-invalid={!!errors.password}
                            required
                        />
                        <button
                            type="button"
                            className="password-toggle"
                            onClick={togglePasswordVisibility}
                            disabled={isLoading}
                            aria-label={showPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
                        >
                            {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                        </button>
                    </div>
                    {errors.password && (
                        <span
                            className="error-text"
                            id="password-error"
                            role="alert"
                            aria-live="polite"
                        >
                            {errors.password}
                        </span>
                    )}
                    {capsLockOn && (
                        <div className="caps-warning">
                            –í–∫–ª—é—á–µ–Ω Caps Lock
                        </div>
                    )}
                </div>

                {/* –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" */}
                <div className="form-group">
                    <label style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 'var(--space-2)',
                        cursor: 'pointer',
                        fontSize: '0.875rem'
                    }}>
                        <input
                            type="checkbox"
                            checked={rememberMe}
                            onChange={(e) => setRememberMe(e.target.checked)}
                            disabled={isLoading}
                            style={{
                                width: '16px',
                                height: '16px',
                                accentColor: 'var(--primary-600)'
                            }}
                        />
                        <span>–ó–∞–ø–æ–º–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
                    </label>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
                <button
                    type="submit"
                    className={`login-button ${isLoading ? 'loading' : ''}`}
                    disabled={isLoading || !username.trim() || !password}
                    aria-describedby="login-button-description"
                >
                    {isLoading ? (
                        <>
                            <span>‚è≥</span>
                            <span>–í—Ö–æ–¥...</span>
                        </>
                    ) : (
                        <>
                            <span>üöÄ</span>
                            <span>–í–æ–π—Ç–∏</span>
                        </>
                    )}
                </button>

                {/* –§—É—Ç–µ—Ä —Ñ–æ—Ä–º—ã */}
                <div className="login-footer">
                    <p id="login-button-description">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã
                    </p>

                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div style={{
                        fontSize: '0.75rem',
                        color: 'var(--text-muted)',
                        marginTop: 'var(--space-4)',
                        textAlign: 'center',
                        lineHeight: 1.4
                    }}>
                        <p style={{marginBottom: 'var(--space-2)'}}>
                            üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç–∞–ª–æ–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                        </p>
                        <p>
                            üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
                        </p>
                    </div>
                </div>
            </form>

            {/* –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è screen readers */}
            <div className="sr-only" aria-live="polite" aria-atomic="true">
                {isLoading && "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"}
                {generalError && `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${generalError}`}
                {Object.keys(errors).length > 0 && "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ"}
            </div>
        </div>
    );
}

export default Login;