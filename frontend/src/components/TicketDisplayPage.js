import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import ReconnectingWebSocket from 'reconnecting-websocket';
import '../styles/TicketDisplayPage.css';
import { config } from "../config";
import logo from "../static/logo.png";
import notificationService from '../services/NotificationService';

function TicketDisplayPage() {
    document.title = "TICKET";

    const location = useLocation();
    const { ticketNumber, queueType, ticketId, fullName, token } = location.state || {};

    const [socket, setSocket] = useState(null);
    const [queueStatus, setQueueStatus] = useState('waiting');
    const [currentlyServing, setCurrentlyServing] = useState(null);
    const [queuePosition, setQueuePosition] = useState(null);
    const [estimatedWaitTime, setEstimatedWaitTime] = useState(null);

    const updateQueuePosition = async () => {
        try {
            const response = await fetch(config.fetchQueuesUrl, {
                headers: {
                    'Authorization': `Token ${localStorage.getItem('access_token')}`
                }
            });
            const data = await response.json();

            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à—É –æ—á–µ—Ä–µ–¥—å
            const ourQueue = data.find(queue => queue['–û—á–µ—Ä–µ–¥—å'] === queueType);
            if (ourQueue && ourQueue['–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–ª–æ–Ω—ã']) {
                const tickets = ourQueue['–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–ª–æ–Ω—ã'];
                const ourIndex = tickets.findIndex(ticket =>
                    ticket.number === ticketNumber || ticket.full_name === fullName
                );

                if (ourIndex !== -1) {
                    setQueuePosition(ourIndex + 1);
                    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (2-3 –º–∏–Ω—É—Ç—ã –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞)
                    setEstimatedWaitTime(ourIndex * 2.5);
                } else {
                    // –¢–∞–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ–±—Å–ª—É–∂–µ–Ω
                    setQueueStatus('completed');
                }
            }
        } catch (error) {
            console.error("Error updating queue position:", error);
        }
    };

    useEffect(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–ª–æ–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (ticketId && ticketNumber && fullName && queueType) {
            const ticketInfo = {
                ticketId,
                ticketNumber,
                fullName,
                queueType,
                token,
                createdAt: new Date().toISOString()
            };
            notificationService.setUserTicketInfo(ticketInfo);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const ws = new ReconnectingWebSocket(config.queuesSocketUrl);

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log('WebSocket message on ticket page:', data);

            if (data.type === "ticket_called" && data.data) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–ª–∏ –ª–∏ –Ω–∞—à —Ç–∞–ª–æ–Ω
                if (data.data.ticket_id === ticketId ||
                    (data.data.ticket_number === ticketNumber && data.data.full_name === fullName)) {
                    setQueueStatus('called');
                    setCurrentlyServing({
                        full_name: data.data.full_name,
                        ticket_number: data.data.ticket_number,
                        manager_username: data.data.manager_username
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
                    notificationService.showTicketCalledNotification(data.data);

                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                    if (data.data.audio_url) {
                        const audio = new Audio(data.data.audio_url);
                        audio.play().catch(error => {
                            console.error("Error playing audio:", error);
                        });
                    }

                    // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–ª–æ–Ω–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã–∑–≤–∞–Ω
                    notificationService.clearUserTicketInfo();
                }
            }

            if (data.type === "ticket_count_update" && data.data) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
                updateQueuePosition();
            }
        };

        ws.onopen = () => {
            console.log('WebSocket connected for ticket tracking');
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
            updateQueuePosition();
        };

        setSocket(ws);

        return () => {
            ws.close();
        };
    }, [ticketId, ticketNumber, fullName, queueType, token]);

    const getQueueDisplayName = (type) => {
        const queueNames = {
            'BACHELOR': '–ë–∞–∫–∞–ª–∞–≤—Ä',
            'MASTER': '–ú–∞–≥./–î–æ–∫—Ç.',
            'PHD': 'PLATONUS'
        };
        return queueNames[type] || type;
    };

    const getManagerLocation = (managerUsername) => {
        if (!managerUsername) return '–º–µ–Ω–µ–¥–∂–µ—Ä—É';
        
        const username = managerUsername.toLowerCase();
        
        if (username.includes('auditoria111') || username.includes('aauditoria111')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 111';
        } else if (username.includes('auditoria303')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 303';
        } else if (username.includes('auditoria305')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 305';
        } else if (username.includes('auditoria306')) {
            return '–∞—É–¥–∏—Ç–æ—Ä–∏–∏ 306';
        } else {
            const stolNumber = username.charAt(username.length - 1);
            return `—Å—Ç–æ–ª—É ${stolNumber}`;
        }
    };

    const formatWaitTime = (minutes) => {
        if (minutes < 60) {
            return `${Math.round(minutes)} –º–∏–Ω.`;
        } else {
            const hours = Math.floor(minutes / 60);
            const mins = Math.round(minutes % 60);
            return `${hours} —á. ${mins} –º–∏–Ω.`;
        }
    };

    return (
        <div className="ticket-display-container">
            <img src={logo} alt="Logo" className="logo" />
            
            <div className="ticket-header">
                <h1>–í–ê–® –¢–ê–õ–û–ù</h1>
                {queueStatus === 'called' && (
                    <div className="called-notification">
                        üîî –í–ê–® –¢–ê–õ–û–ù –í–´–ó–í–ê–ù!
                    </div>
                )}
            </div>

            <div className="ticket-info">
                <div className="ticket-main-info">
                    <p><strong>–§–ò–û:</strong> {fullName}</p>
                    <p><strong>–ù–û–ú–ï–† –¢–ê–õ–û–ù–ê:</strong> {ticketNumber}</p>
                    <p><strong>–¢–ò–ü –û–ß–ï–†–ï–î–ò:</strong> {getQueueDisplayName(queueType)}</p>
                </div>

                {token && (
                    <div className="ticket-token">
                        <p><strong>–¢–æ–∫–µ–Ω:</strong> {token}</p>
                        <small>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</small>
                    </div>
                )}
            </div>

            <div className="queue-status">
                {queueStatus === 'waiting' && (
                    <div className="status-waiting">
                        <h3>–û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏</h3>
                        {queuePosition && (
                            <div className="position-info">
                                <p>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <strong>{queuePosition}</strong></p>
                                {estimatedWaitTime && (
                                    <p>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <strong>{formatWaitTime(estimatedWaitTime)}</strong></p>
                                )}
                            </div>
                        )}
                        <div className="waiting-message">
                            <p>–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–∑–æ–≤–∞. –í–∞—à–µ –§–ò–û –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–æ, –∫–æ–≥–¥–∞ –ø–æ–¥–æ–π–¥–µ—Ç –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å.</p>
                            <div className="status-indicator">
                                <div className="spinner"></div>
                                <span>–û–∂–∏–¥–∞–Ω–∏–µ...</span>
                            </div>
                        </div>
                    </div>
                )}

                {queueStatus === 'called' && currentlyServing && (
                    <div className="status-called">
                        <h3>üîî –í–ê–® –¢–ê–õ–û–ù –í–´–ó–í–ê–ù!</h3>
                        <div className="call-info">
                            <p className="call-message">
                                <strong>{currentlyServing.full_name}</strong>, 
                                –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ {getManagerLocation(currentlyServing.manager_username)}
                            </p>
                            <div className="urgency-indicator">
                                <span className="blink">‚ö†Ô∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–û–î–û–ô–î–ò–¢–ï –ö –ú–ï–ù–ï–î–ñ–ï–†–£ ‚ö†Ô∏è</span>
                            </div>
                        </div>
                    </div>
                )}

                {queueStatus === 'completed' && (
                    <div className="status-completed">
                        <h3>‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</h3>
                        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏!</p>
                    </div>
                )}
            </div>

            <div className="ticket-actions">
                <button 
                    className="refresh-button"
                    onClick={updateQueuePosition}
                >
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                </button>
                
                <button 
                    className="home-button"
                    onClick={() => window.location.href = '/'}
                >
                    –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
            </div>

            <div className="ticket-footer">
                <p className="footer-text">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                </p>
                <p className="footer-warning">
                    –ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                </p>
            </div>
        </div>
    );
}

export default TicketDisplayPage;