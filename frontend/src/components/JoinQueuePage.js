import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/joinQueue.css';
import { config, getQueueDisplayName, getQueueDescription, getQueueEmoji } from "../config";
import logo from "../static/logo.png";
import axiosInstance, { queueAPI } from "../axiosInstance";
import notificationService from '../services/NotificationService';

function JoinQueuePage() {
    const navigate = useNavigate();

    // State management
    const [message, setMessage] = useState('');
    const [fullName, setFullName] = useState('');
    const [selectedQueue, setSelectedQueue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingQueueTypes, setIsLoadingQueueTypes] = useState(true);
    const [errors, setErrors] = useState({});
    const [notificationPermissionGranted, setNotificationPermissionGranted] = useState(false);
    const [isFormVisible, setIsFormVisible] = useState(false);
    const [isNotificationSupported, setIsNotificationSupported] = useState(false);
    const [queueTypes, setQueueTypes] = useState([]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –æ—á–µ—Ä–µ–¥–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const loadQueueTypes = useCallback(async () => {
        try {
            setIsLoadingQueueTypes(true);
            const response = await queueAPI.getQueueTypes();

            if (response.data && Array.isArray(response.data)) {
                setQueueTypes(response.data);
                console.log('Loaded queue types:', response.data);
            } else {
                throw new Error('Invalid queue types data format');
            }
        } catch (error) {
            console.error('Error loading queue types:', error);

            // Fallback to static queue types if API fails
            const fallbackQueueTypes = [
                { name: 'BACHELOR_GRANT', display_name: '–ë–∞–∫–∞–ª–∞–≤—Ä –≥—Ä–∞–Ω—Ç' },
                { name: 'BACHELOR_PAID', display_name: '–ë–∞–∫–∞–ª–∞–≤—Ä –ø–ª–∞—Ç–Ω–æ–µ' },
                { name: 'MASTER', display_name: '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞' },
                { name: 'PHD', display_name: 'PhD' },
                { name: 'PLATONUS', display_name: 'Platonus' }
            ];

            setQueueTypes(fallbackQueueTypes);
            console.warn('Using fallback queue types due to API error');
        } finally {
            setIsLoadingQueueTypes(false);
        }
    }, []);

    // Queue options configuration based on loaded data
    const queueOptions = useMemo(() => {
        return queueTypes.map(queueType => ({
            value: queueType.name,
            label: queueType.display_name || getQueueDisplayName(queueType.name),
            emoji: getQueueEmoji(queueType.name),
            description: getQueueDescription(queueType.name),
            ticketRange: queueType.min_ticket_number && queueType.max_ticket_number
                ? `${queueType.min_ticket_number}-${queueType.max_ticket_number}`
                : null
        }));
    }, [queueTypes]);

    // Form validation
    const validateForm = useCallback(() => {
        const newErrors = {};

        // Validate full name
        if (!fullName.trim()) {
            newErrors.fullName = '–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
        } else if (fullName.trim().length < 3) {
            newErrors.fullName = '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
        } else if (fullName.trim().length > 255) {
            newErrors.fullName = '–§–ò–û –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤';
        } else if (!/^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-'\.]+$/u.test(fullName.trim())) {
            newErrors.fullName = '–§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã';
        }

        // Validate queue selection
        if (!selectedQueue) {
            newErrors.selectedQueue = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏';
        } else if (!queueOptions.find(option => option.value === selectedQueue)) {
            newErrors.selectedQueue = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [fullName, selectedQueue, queueOptions]);

    // Clear field error on change
    const clearFieldError = useCallback((fieldName) => {
        if (errors[fieldName]) {
            setErrors(prev => ({ ...prev, [fieldName]: '' }));
        }
    }, [errors]);

    // Handle form submission
    const handleSubmit = useCallback(async (e) => {
        e.preventDefault();

        if (!validateForm()) {
            // Haptic feedback –¥–ª—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (navigator.vibrate) {
                navigator.vibrate([100, 50, 100]);
            }
            return;
        }

        setIsLoading(true);
        setMessage('');
        setErrors({});

        try {
            const response = await queueAPI.joinQueue(selectedQueue, fullName.trim());

            if (response.data.message === "–ù–ï –†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø") {
                setMessage(response.data.message);
                if (navigator.vibrate) {
                    navigator.vibrate([200, 100, 200]);
                }
            } else {
                console.log("Response data:", response.data);

                // Haptic feedback –¥–ª—è —É—Å–ø–µ—Ö–∞
                if (navigator.vibrate) {
                    navigator.vibrate([50, 25, 50, 25, 50]);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–ª–æ–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                const ticketInfo = {
                    ticketId: response.data.ticket_id,
                    ticketNumber: response.data.ticket,
                    fullName: response.data.full_name,
                    queueType: response.data.queue_type || selectedQueue,
                    queueTypeDisplay: response.data.queue_type_display || getQueueDisplayName(selectedQueue),
                    token: response.data.token,
                    createdAt: new Date().toISOString()
                };

                notificationService.setUserTicketInfo(ticketInfo);

                // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                setTimeout(() => {
                    navigate('/ticket', {
                        state: {
                            ticketNumber: response.data.ticket,
                            queueType: response.data.queue_type || selectedQueue,
                            queueTypeDisplay: response.data.queue_type_display || getQueueDisplayName(selectedQueue),
                            ticketId: response.data.ticket_id,
                            fullName: response.data.full_name,
                            token: response.data.token
                        }
                    });
                }, 600);
            }
        } catch (error) {
            console.error("Error joining queue:", error);

            // Haptic feedback –¥–ª—è –æ—à–∏–±–∫–∏
            if (navigator.vibrate) {
                navigator.vibrate([200, 100, 200, 100, 200]);
            }

            if (error.response && error.response.data) {
                if (error.response.data.errors) {
                    setErrors(error.response.data.errors);
                } else if (error.response.data.error) {
                    setMessage(error.response.data.error);
                } else {
                    setMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            } else if (error.code === 'ECONNABORTED') {
                setMessage('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            } else {
                setMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            }
        } finally {
            setIsLoading(false);
        }
    }, [validateForm, selectedQueue, fullName, navigate]);

    // Reset form
    const handleRetry = useCallback(() => {
        setMessage('');
        setFullName('');
        setSelectedQueue('');
        setErrors({});

        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            const firstInput = document.getElementById('fullName');
            if (firstInput) {
                firstInput.focus();
            }
        }, 100);
    }, []);

    // Notification status helpers
    const getNotificationStatusIcon = useCallback(() => {
        if (!isNotificationSupported) {
            return 'üì±';
        }
        return notificationPermissionGranted ? '‚úÖ' : 'üîî';
    }, [isNotificationSupported, notificationPermissionGranted]);

    const getNotificationStatusText = useCallback(() => {
        if (!isNotificationSupported) {
            return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ';
        }

        if (notificationPermissionGranted) {
            return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–∞–ª–æ–Ω–∞';
        }

        return '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –≤—ã–∑–æ–≤–µ —Ç–∞–ª–æ–Ω–∞';
    }, [isNotificationSupported, notificationPermissionGranted]);

    // Load queue types on mount
    useEffect(() => {
        loadQueueTypes();
    }, [loadQueueTypes]);

    // Initialize form visibility animation
    useEffect(() => {
        const timer = setTimeout(() => {
            setIsFormVisible(true);
        }, 150);
        return () => clearTimeout(timer);
    }, []);

    // Setup notifications
    useEffect(() => {
        const setupNotifications = async () => {
            try {
                const isSupported = notificationService.isNotificationSupported();
                setIsNotificationSupported(isSupported);

                if (isSupported) {
                    const permission = notificationService.getPermissionStatus();
                    setNotificationPermissionGranted(permission === 'granted');

                    if (permission === 'default') {
                        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                        const timer = setTimeout(async () => {
                            try {
                                const result = await notificationService.requestPermission();
                                setNotificationPermissionGranted(result === 'granted');

                                if (result === 'granted') {
                                    notificationService.showTestNotification();
                                }
                            } catch (error) {
                                console.warn('Notification permission request failed:', error);
                            }
                        }, 2000);

                        return () => clearTimeout(timer);
                    }
                }
            } catch (error) {
                console.warn('Notification setup failed:', error);
            }
        };

        setupNotifications();
    }, []);

    // Keyboard shortcuts
    useEffect(() => {
        const handleKeyDown = (event) => {
            // ESC –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
            if (event.key === 'Escape' && !isLoading) {
                if (message) {
                    handleRetry();
                }
            }

            // Enter –≤ —Å–µ–ª–µ–∫—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            if (event.key === 'Enter' && event.target.tagName === 'SELECT') {
                event.preventDefault();
                if (!isLoading && fullName && selectedQueue) {
                    const form = document.querySelector('.join-queue-form');
                    if (form) {
                        form.requestSubmit();
                    }
                }
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [message, isLoading, fullName, selectedQueue, handleRetry]);

    // Set page title
    useEffect(() => {
        document.title = "–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω - IITU";
    }, []);

    return (
        <div className="join-queue-container">
            <img
                src={logo}
                alt="–õ–æ–≥–æ—Ç–∏–ø IITU"
                className="logo"
                onError={(e) => {
                    e.target.style.display = 'none';
                }}
            />

            {message ? (
                <div className={`message-container ${isFormVisible ? 'visible' : ''}`}>
                    <div className={`message ${message === "–ù–ï –†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø" ? 'error-message' : ''}`}>
                        {message === "–ù–ï –†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø" ? (
                            <>
                                <span>‚è∞</span>
                                <span>{message}</span>
                            </>
                        ) : (
                            message
                        )}
                    </div>
                    {message !== "–ù–ï –†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø" && (
                        <button
                            className="retry-button"
                            onClick={handleRetry}
                            type="button"
                            aria-label="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
                        >
                            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    )}
                </div>
            ) : (
                <form
                    onSubmit={handleSubmit}
                    className={`join-queue-form ${isFormVisible ? 'visible' : ''}`}
                    noValidate
                    aria-label="–§–æ—Ä–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–ª–æ–Ω–∞"
                >
                    <h1 className="form-title">
                        <span>üé´</span>
                        <span>–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω</span>
                    </h1>

                    <div className="form-group">
                        <label htmlFor="fullName" className="form-label">
                            <span>üë§</span>
                            <span>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û</span>
                        </label>
                        <input
                            type="text"
                            id="fullName"
                            value={fullName}
                            onChange={(e) => {
                                setFullName(e.target.value);
                                clearFieldError('fullName');
                            }}
                            placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                            className={`form-input ${errors.fullName ? 'error' : ''}`}
                            maxLength="255"
                            disabled={isLoading}
                            autoComplete="name"
                            autoFocus
                            aria-describedby={errors.fullName ? "fullName-error" : "fullName-help"}
                            aria-invalid={!!errors.fullName}
                            required
                        />
                        {errors.fullName ? (
                            <span
                                className="error-text"
                                id="fullName-error"
                                role="alert"
                                aria-live="polite"
                            >
                                {errors.fullName}
                            </span>
                        ) : (
                            <span id="fullName-help" className="sr-only">
                                –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
                            </span>
                        )}
                    </div>

                    <div className="form-group">
                        <label htmlFor="queueType" className="form-label">
                            <span>üìã</span>
                            <span>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏</span>
                        </label>

                        {isLoadingQueueTypes ? (
                            <div className="loading-select">
                                <span>‚è≥</span>
                                <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π...</span>
                            </div>
                        ) : (
                            <select
                                id="queueType"
                                value={selectedQueue}
                                onChange={(e) => {
                                    setSelectedQueue(e.target.value);
                                    clearFieldError('selectedQueue');
                                }}
                                className={`form-select ${errors.selectedQueue ? 'error' : ''}`}
                                disabled={isLoading || queueOptions.length === 0}
                                aria-describedby={errors.selectedQueue ? "queueType-error" : "queueType-help"}
                                aria-invalid={!!errors.selectedQueue}
                                required
                            >
                                <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ --</option>
                                {queueOptions.map(option => (
                                    <option
                                        key={option.value}
                                        value={option.value}
                                        title={`${option.description}${option.ticketRange ? ` (${option.ticketRange})` : ''}`}
                                    >
                                        {option.emoji} {option.label}
                                        {option.ticketRange && ` (${option.ticketRange})`}
                                    </option>
                                ))}
                            </select>
                        )}

                        {errors.selectedQueue ? (
                            <span
                                className="error-text"
                                id="queueType-error"
                                role="alert"
                                aria-live="polite"
                            >
                                {errors.selectedQueue}
                            </span>
                        ) : (
                            <span id="queueType-help" className="sr-only">
                                –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                            </span>
                        )}
                    </div>

                    <button
                        type="submit"
                        className={`submit-button ${isLoading ? 'loading' : ''}`}
                        disabled={isLoading || !fullName.trim() || !selectedQueue || isLoadingQueueTypes}
                        aria-describedby="submit-button-description"
                    >
                        {isLoading ? (
                            <>
                                <span>‚è≥</span>
                                <span>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–ª–æ–Ω–∞...</span>
                            </>
                        ) : (
                            <>
                                <span>‚ú®</span>
                                <span>–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω</span>
                            </>
                        )}
                    </button>

                    <div className="form-info">
                        <p id="submit-button-description">
                            <span>üí¨</span>
                            <span>–í–∞—à–µ –§–ò–û –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–æ, –∫–æ–≥–¥–∞ –ø–æ–¥–æ–π–¥–µ—Ç –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å</span>
                        </p>

                        <div className={`notification-status ${notificationPermissionGranted ? 'granted' : 'not-granted'}`}>
                            <span>{getNotificationStatusIcon()}</span>
                            <span>{getNotificationStatusText()}</span>
                        </div>

                        {!notificationPermissionGranted && isNotificationSupported && (
                            <p style={{
                                fontSize: '0.75rem',
                                marginTop: 'var(--space-2)',
                                opacity: 0.8,
                                display: 'flex',
                                alignItems: 'flex-start',
                                gap: 'var(--space-1)'
                            }}>
                                <span>üí°</span>
                                <span>–°–æ–≤–µ—Ç: –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω</span>
                            </p>
                        )}

                        {selectedQueue && queueOptions.length > 0 && (
                            <div style={{
                                fontSize: '0.75rem',
                                marginTop: 'var(--space-3)',
                                padding: 'var(--space-2)',
                                background: 'rgba(102, 126, 234, 0.1)',
                                borderRadius: 'var(--radius-md)',
                                display: 'flex',
                                alignItems: 'flex-start',
                                gap: 'var(--space-1)'
                            }}>
                                <span>‚ÑπÔ∏è</span>
                                <div>
                                    <div>
                                        <strong>{queueOptions.find(opt => opt.value === selectedQueue)?.label}</strong>
                                    </div>
                                    <div style={{ marginTop: '4px', opacity: 0.8 }}>
                                        {queueOptions.find(opt => opt.value === selectedQueue)?.description}
                                    </div>
                                    {queueOptions.find(opt => opt.value === selectedQueue)?.ticketRange && (
                                        <div style={{ marginTop: '4px', opacity: 0.7, fontSize: '0.7rem' }}>
                                            –ù–æ–º–µ—Ä–∞ —Ç–∞–ª–æ–Ω–æ–≤: {queueOptions.find(opt => opt.value === selectedQueue)?.ticketRange}
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}

                        {queueOptions.length === 0 && !isLoadingQueueTypes && (
                            <div style={{
                                fontSize: '0.75rem',
                                marginTop: 'var(--space-3)',
                                padding: 'var(--space-2)',
                                background: 'rgba(255, 193, 7, 0.1)',
                                borderRadius: 'var(--radius-md)',
                                display: 'flex',
                                alignItems: 'flex-start',
                                gap: 'var(--space-1)'
                            }}>
                                <span>‚ö†Ô∏è</span>
                                <span>–¢–∏–ø—ã –æ—á–µ—Ä–µ–¥–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</span>
                            </div>
                        )}
                    </div>
                </form>
            )}

            {/* –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è screen readers */}
            <div className="sr-only" aria-live="polite" aria-atomic="true">
                {isLoading && "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–ª–æ–Ω–∞"}
                {isLoadingQueueTypes && "–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–∏–ø—ã –æ—á–µ—Ä–µ–¥–µ–π"}
                {message && !isLoading && `–°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`}
            </div>
        </div>
    );
}

export default JoinQueuePage;