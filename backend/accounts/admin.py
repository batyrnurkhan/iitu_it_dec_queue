from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser, ManagerActionLog, DailyTicketReport, Table, WorkplaceType
from import_export.admin import ExportActionMixin


@admin.register(CustomUser)
class CustomUserAdmin(ExportActionMixin, UserAdmin):
    model = CustomUser
    list_display = ['id', 'username', 'first_name', 'email', 'role', 'manager_type', 'workplace',
                    'allowed_queues_display', 'called_tickets_count']
    list_filter = ['role', 'manager_type', 'workplace__workplace_type', 'workplace']
    search_fields = ['username', 'first_name', 'last_name', 'email']

    fieldsets = UserAdmin.fieldsets + (
        ('–†–∞–±–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('role', 'manager_type', 'workplace', 'queue_permissions'),
            'description': '–ù–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏'
        }),
    )

    def allowed_queues_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
        queues = obj.get_allowed_queue_types()
        if not queues:
            return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"

        emoji_map = {
            'BACHELOR_GRANT': 'üéì',
            'BACHELOR_PAID': 'üí≥',
            'MASTER': 'üìö',
            'PHD': 'üî¨',
            'PLATONUS': 'üíª'
        }

        result = []
        for queue in queues:
            emoji = emoji_map.get(queue, 'üìã')
            result.append(f"{emoji}")

        return " ".join(result) + f" ({len(queues)})"

    allowed_queues_display.short_description = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏'

    def called_tickets_count(self, obj):
        return obj.manageractionlog_set.filter(action__startswith="–í—ã–∑–≤–∞–Ω —Ç–∞–ª–æ–Ω").count()

    called_tickets_count.short_description = '–í—ã–∑–≤–∞–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤'


# Admin customization for WorkplaceType
@admin.register(WorkplaceType)
class WorkplaceTypeAdmin(admin.ModelAdmin):
    list_display = ['name', 'workplace_type', 'number', 'location', 'queue_types_display', 'is_active',
                    'assigned_users_count']
    list_filter = ['workplace_type', 'is_active']
    search_fields = ['name', 'location']
    ordering = ['workplace_type', 'number']

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'workplace_type', 'number', 'location', 'is_active')
        }),
        ('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—á–µ—Ä–µ–¥–∏', {
            'fields': ('allowed_queue_types',),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –æ—á–µ—Ä–µ–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å —ç—Ç–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ'
        }),
    )

    def queue_types_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π"""
        if not obj.allowed_queue_types:
            return "‚Äî"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—á–µ—Ä–µ–¥–∏
        emoji_map = {
            'BACHELOR_GRANT': 'üéì',
            'BACHELOR_PAID': 'üí≥',
            'MASTER': 'üìö',
            'PHD': 'üî¨',
            'PLATONUS': 'üíª'
        }

        display_names = {
            'BACHELOR_GRANT': '–ë–∞–∫–∞–ª–∞–≤—Ä –≥—Ä–∞–Ω—Ç',
            'BACHELOR_PAID': '–ë–∞–∫–∞–ª–∞–≤—Ä –ø–ª–∞—Ç–Ω–æ–µ',
            'MASTER': '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞',
            'PHD': 'PhD',
            'PLATONUS': 'Platonus'
        }

        result = []
        for queue_type in obj.allowed_queue_types:
            emoji = emoji_map.get(queue_type, 'üìã')
            name = display_names.get(queue_type, queue_type)
            result.append(f"{emoji} {name}")

        return " | ".join(result)

    queue_types_display.short_description = '–û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ –æ—á–µ—Ä–µ–¥–∏'

    def assigned_users_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        count = obj.customuser_set.count()
        if count == 0:
            return "‚Äî"
        return f"{count} —á–µ–ª."

    assigned_users_count.short_description = '–ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ['activate_workplaces', 'deactivate_workplaces']

    def activate_workplaces(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç: {updated}')

    activate_workplaces.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"

    def deactivate_workplaces(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç: {updated}')

    deactivate_workplaces.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"


# Admin customization for ManagerActionLog
@admin.register(ManagerActionLog)
class ManagerActionLogAdmin(ExportActionMixin, admin.ModelAdmin):
    list_display = ['manager', 'action', 'timestamp', 'ticket_number', 'queue_type', 'manager_type',
                    'manager_workplace']
    list_filter = ['manager__manager_type', 'queue_type', 'manager__workplace', 'timestamp']
    search_fields = ['manager__username', 'action', 'ticket_number']
    date_hierarchy = 'timestamp'
    ordering = ['-timestamp']

    def manager_type(self, obj):
        return obj.manager.manager_type if obj.manager.manager_type else "‚Äî"

    manager_type.short_description = '–¢–∏–ø –º–µ–Ω–µ–¥–∂–µ—Ä–∞'

    def manager_workplace(self, obj):
        return obj.manager.workplace.name if obj.manager.workplace else "‚Äî"

    manager_workplace.short_description = '–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ'

    def has_change_permission(self, request, obj=None):
        return False  # Prevent editing logs

    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser


@admin.register(DailyTicketReport)
class DailyTicketReportAdmin(ExportActionMixin, admin.ModelAdmin):
    list_display = ['manager', 'date', 'ticket_count', 'manager_workplace', 'queue_stats_display']
    list_filter = ['manager', 'date', 'manager__workplace']
    search_fields = ['manager__username']
    date_hierarchy = 'date'
    ordering = ['-date']

    def manager_workplace(self, obj):
        return obj.manager.workplace.name if obj.manager.workplace else "‚Äî"

    manager_workplace.short_description = '–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ'

    def queue_stats_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ—á–µ—Ä–µ–¥–µ–π"""
        if not obj.queue_type_stats:
            return "‚Äî"

        stats = []
        for queue_type, count in obj.queue_type_stats.items():
            stats.append(f"{queue_type}: {count}")

        return " | ".join(stats)

    queue_stats_display.short_description = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥—è–º'


@admin.register(Table)
class TableAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ['name', 'description']