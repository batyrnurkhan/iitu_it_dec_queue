from django.core.management.base import BaseCommand
from accounts.models import WorkplaceType


class Command(BaseCommand):
    help = 'Setup workplaces with queue type permissions'

    def handle(self, *args, **options):
        workplaces_config = [
            # –°—Ç–æ–ª—ã 1-7: —Ç–æ–ª—å–∫–æ –ë–∞–∫–∞–ª–∞–≤—Ä –≥—Ä–∞–Ω—Ç
            *[{
                'name': f'–°—Ç–æ–ª {i}',
                'workplace_type': 'TABLE',
                'number': i,
                'allowed_queue_types': ['BACHELOR_GRANT']
            } for i in range(1, 8)],

            # –°—Ç–æ–ª—ã 8-10: –ë–∞–∫–∞–ª–∞–≤—Ä –≥—Ä–∞–Ω—Ç + –ë–∞–∫–∞–ª–∞–≤—Ä –ø–ª–∞—Ç–Ω–æ–µ
            *[{
                'name': f'–°—Ç–æ–ª {i}',
                'workplace_type': 'TABLE',
                'number': i,
                'allowed_queue_types': ['BACHELOR_GRANT', 'BACHELOR_PAID']
            } for i in range(8, 11)],

            # –°—Ç–æ–ª—ã 11-12: –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ + PhD
            *[{
                'name': f'–°—Ç–æ–ª {i}',
                'workplace_type': 'TABLE',
                'number': i,
                'allowed_queue_types': ['MASTER', 'PHD']
            } for i in range(11, 13)],

            # –ö–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è Platonus
            {
                'name': '–ö–∞–±–∏–Ω–µ—Ç 305',
                'workplace_type': 'ROOM',
                'number': 305,
                'location': '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂',
                'allowed_queue_types': ['PLATONUS']
            },
            {
                'name': '–ö–∞–±–∏–Ω–µ—Ç 306',
                'workplace_type': 'ROOM',
                'number': 306,
                'location': '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂',
                'allowed_queue_types': ['PLATONUS']
            },
            {
                'name': '–ö–∞–±–∏–Ω–µ—Ç 307',
                'workplace_type': 'ROOM',
                'number': 307,
                'location': '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂',
                'allowed_queue_types': ['PLATONUS']
            }
        ]

        for workplace_data in workplaces_config:
            workplace, created = WorkplaceType.objects.get_or_create(
                name=workplace_data['name'],
                defaults={
                    'workplace_type': workplace_data['workplace_type'],
                    'number': workplace_data['number'],
                    'location': workplace_data.get('location', ''),
                    'allowed_queue_types': workplace_data['allowed_queue_types'],
                    'is_active': True
                }
            )

            if created:
                self.stdout.write(
                    self.style.SUCCESS(
                        f'–°–æ–∑–¥–∞–Ω–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ: {workplace.name} '
                        f'(–º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å: {", ".join(workplace.allowed_queue_types)})'
                    )
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
                workplace.allowed_queue_types = workplace_data['allowed_queue_types']
                workplace.save()

                self.stdout.write(
                    self.style.WARNING(
                        f'–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ: {workplace.name} '
                        f'(–º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å: {", ".join(workplace.allowed_queue_types)})'
                    )
                )

        self.stdout.write(
            self.style.SUCCESS('–í—Å–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º Python –≤–º–µ—Å—Ç–æ SQL –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        self.stdout.write('\nüìä –°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é:')

        all_workplaces = WorkplaceType.objects.all()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤ Python
        bachelor_grant_count = 0
        bachelor_paid_count = 0
        master_count = 0
        phd_count = 0
        platonus_count = 0

        for workplace in all_workplaces:
            if 'BACHELOR_GRANT' in workplace.allowed_queue_types:
                bachelor_grant_count += 1
            if 'BACHELOR_PAID' in workplace.allowed_queue_types:
                bachelor_paid_count += 1
            if 'MASTER' in workplace.allowed_queue_types:
                master_count += 1
            if 'PHD' in workplace.allowed_queue_types:
                phd_count += 1
            if 'PLATONUS' in workplace.allowed_queue_types:
                platonus_count += 1

        self.stdout.write(f'üéì –ë–∞–∫–∞–ª–∞–≤—Ä –≥—Ä–∞–Ω—Ç: {bachelor_grant_count} –º–µ—Å—Ç')
        self.stdout.write(f'üí≥ –ë–∞–∫–∞–ª–∞–≤—Ä –ø–ª–∞—Ç–Ω–æ–µ: {bachelor_paid_count} –º–µ—Å—Ç')
        self.stdout.write(f'üìö –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞: {master_count} –º–µ—Å—Ç')
        self.stdout.write(f'üî¨ PhD: {phd_count} –º–µ—Å—Ç')
        self.stdout.write(f'üíª Platonus: {platonus_count} –º–µ—Å—Ç')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É
        self.stdout.write('\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ä–∞–±–æ—á–∏–º –º–µ—Å—Ç–∞–º:')

        tables = all_workplaces.filter(workplace_type='TABLE').order_by('number')
        rooms = all_workplaces.filter(workplace_type='ROOM').order_by('number')

        if tables:
            self.stdout.write('\nü™ë –°—Ç–æ–ª—ã:')
            for table in tables:
                queue_types_str = ', '.join(table.allowed_queue_types)
                self.stdout.write(f'  ‚Ä¢ {table.name}: {queue_types_str}')

        if rooms:
            self.stdout.write('\nüè¢ –ö–∞–±–∏–Ω–µ—Ç—ã:')
            for room in rooms:
                queue_types_str = ', '.join(room.allowed_queue_types)
                self.stdout.write(f'  ‚Ä¢ {room.name}: {queue_types_str}')