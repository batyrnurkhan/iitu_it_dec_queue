# queue_qr/admin.py

from django.contrib import admin
from .models import Queue, QueueTicket, ApiStatus, QueueType


@admin.register(QueueType)
class QueueTypeAdmin(admin.ModelAdmin):
    list_display = ['name', 'get_name_display', 'min_ticket_number', 'max_ticket_number', 'active_tickets_count']
    search_fields = ['name']
    list_filter = ['name']

    def get_name_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        return obj.get_name_display()

    get_name_display.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ'

    def active_tickets_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–ª–æ–Ω–æ–≤"""
        count = obj.tickets.filter(served=False).count()
        return f"{count} —Ç–∞–ª–æ–Ω–æ–≤" if count > 0 else "‚Äî"

    active_tickets_count.short_description = '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–ª–æ–Ω–æ–≤'


@admin.register(Queue)
class QueueAdmin(admin.ModelAdmin):
    list_display = ['type', 'current_number', 'currently_serving', 'manager', 'queue_status']
    list_filter = ['type']
    search_fields = ['type', 'manager__username']

    def queue_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        if obj.current_number == obj.currently_serving:
            return "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è"
        elif obj.currently_serving < obj.current_number:
            waiting = obj.current_number - obj.currently_serving
            return f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {waiting}"
        else:
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"

    queue_status.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(QueueTicket)
class QueueTicketAdmin(admin.ModelAdmin):
    list_display = ['number', 'full_name', 'queue_type_name', 'served_status', 'serving_manager', 'created_at']
    list_filter = ['served', 'queue_type__name', 'created_at']
    search_fields = ['number', 'full_name', 'serving_manager__username', 'queue_type__name']
    readonly_fields = ['token', 'created_at']
    date_hierarchy = 'created_at'

    def queue_type_name(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—á–µ—Ä–µ–¥–∏"""
        emoji_map = {
            'BACHELOR_GRANT': 'üéì',
            'BACHELOR_PAID': 'üí≥',
            'MASTER': 'üìö',
            'PHD': 'üî¨',
            'PLATONUS': 'üíª',
            'COLLEGE_GRANT': 'üè´'  # –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞
        }
        emoji = emoji_map.get(obj.queue_type.name, 'üìã')
        return f"{emoji} {obj.queue_type.get_name_display()}"

    queue_type_name.short_description = '–¢–∏–ø –æ—á–µ—Ä–µ–¥–∏'

    def served_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        if obj.served:
            return "‚úÖ –û–±—Å–ª—É–∂–µ–Ω"
        else:
            return "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"

    served_status.short_description = '–°—Ç–∞—Ç—É—Å'

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('queue_type', 'serving_manager')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ['mark_as_served', 'mark_as_unserved']

    def mark_as_served(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(served=True)
        self.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ: {updated} —Ç–∞–ª–æ–Ω–æ–≤')

    mark_as_served.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ"

    def mark_as_unserved(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(served=False)
        self.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ: {updated} —Ç–∞–ª–æ–Ω–æ–≤')

    mark_as_unserved.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω—ã–µ"


@admin.register(ApiStatus)
class ApiStatusAdmin(admin.ModelAdmin):
    list_display = ['name', 'status', 'status_display']

    def status_display(self, obj):
        """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if obj.status:
            return "üü¢ –í–∫–ª—é—á–µ–Ω–æ"
        else:
            return "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"

    status_display.short_description = '–°—Ç–∞—Ç—É—Å API'